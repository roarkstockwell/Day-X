{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red50\green98\blue178;\red245\green245\blue245;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid702\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid802\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid902\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid25}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs72 \cf2 \expnd0\expndtw0\kerning0
Day-X Outline\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
Day-X is a simple journaling iOS app that we use to demonstrate many concepts we cover in class.\
\pard\pardeftab720

\b\fs56 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Lesson 6 - Storyboard, list view, detail view\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
In this section we will add a 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 that will display our list of journal entries. We will add a 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 that will display and edit journal entries. We will set up our Storyboard scenes and wire them up to each of the views.\
\pard\pardeftab720

\b\fs48 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Set Up the ListViewController\
\pard\pardeftab720

\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Preparation\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Rename 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 using the Refactor tool\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add an external datasource class 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListTableViewDataSource
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 as an NSObject sublcass\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Storyboard Scene\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Embed the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListViewController`` into a
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
UINavigationController```\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Set the title of the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a TableView to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 scene and set suggested constraints\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add one 'prototype cell' to the TableView and assign 'entryCell' as the reuse identifier\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add an 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
NSObject
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 scene\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Use the Identity Inspector to set the Object to a 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListTableViewDataSource
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Wire up the scene's TableView to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListTableViewDataSource
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 object as a datasource outlet\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a Bar Button Item and use the Attribute Inspector to set the Identifier to 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Add
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Class Implementation\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Import 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
UIKit
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 into the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListTableViewDataSource
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 and adopt the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
UITableViewDataSource
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 protocol\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add the required datasource methods in the implementation file\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Dequeue the cell with the reuse identifier we set in the Storyboard scene\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Set the cell's textLabel to 'Entry X' where X is equal to the row the cell occupies (hint: 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
[NSString stringWithFormat:]
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
)\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Eventually the app will return the specific number of entries we have, for now, return 5 cells\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Run the app. You should have a TableView with 5 cells.\
\pard\pardeftab720

\b\fs48 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Set Up the DetailViewController\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class to the project\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new ViewController Scene to the Storyboard\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Use the Identity Inspector to set the scene to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a 'show' segue from the Add button to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 and give the segue an identifier 'addEntry'\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a 'show' segue from the TableViewCell to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 and give the segue an identifer 'viewEntry'\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Run the app. Your cells and the Add button should push the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Add a text field to the view controller\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a UITextField to the top of the view controller in your XIB\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add an IBOutlet UITextField property to the interface in the implementation file\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Wire up the UITextField 'referencing outlet' to the 'textField' outlet on the view controller\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Wire up the UITextField to the DetailViewController as the delegate\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add the textFieldShouldReturn method to the class\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In the method, have the textField resign first responder\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Run the app. Your keyboard should be dismissed when you hit Enter.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Add a text view to the view controller\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add an IBOutlet UITextView property to the interface in the implementation file\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a UITextView just under the title field the view controller in your XIB\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Wire up the UITextView 'referencing outlet' to the 'textView' outlet on the view controller\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Add a clear button to the view controller\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls7\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a UIButton just below the body text view in the Storyboard scene\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add an IBAction method called 'clearButtonTapped' to your implementation file\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Wire up the UIButton 'TouchUpInside' control event to your action\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In the action set the title field and text view's content to empty strings\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Run the app. You should now be able to clear the TextField and TextView when you tap the clear button.\
\pard\pardeftab720

\b\fs56 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Lesson 7 - Model Objects and Model Object Controllers\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
In this section we will add an 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Entry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class. We will add an 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class that will help us manage our Entries in one location. We will set our TableView to display Entries instead of static data, and we will set up our 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to update with the Entry it displays.\
An Object Controller should be the source of valid data for the entire app. In this case we will create an 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to manage our 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Entry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 objects and to handle communication between the view controllers. The 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 will be a shared instance with an NSArray property that holds all of the entries the app has saved. Eventually, we will add persistence to the app using the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Add an Entry class\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls8\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create an Entry subclass (of NSObject) with public properties:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls8\ilvl1
\f1\fs28 \cf2 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
title
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSString* strong)\
\ls8\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
bodyText
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSString* strong)\
\ls8\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
timestamp
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSDate* strong)\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Add an EntryController class\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls9\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create an EntryController subclass (of NSObject) with property:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls9\ilvl1
\f1\fs28 \cf2 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
entries
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSArray, strong, nonatomic readonly) in the Header file\
\ls9\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
entries
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSArray, strong, nonatomic) in the Implementation file\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
We have a public and private implementation of 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
entries
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 because we want to make the array public, but not give write access outside of the EntryController class. The private implementation allows the class to update the array internally.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add the following public methods:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls10\ilvl1
\f1\fs28 \cf2 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
+ (EntryController *)sharedInstance
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls10\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
- (void)addEntry:(Entry *)entry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls10\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
- (void)removeEntry:(Entry *)entry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
The shared instance method should be defined as follows:\
\pard\pardeftab720

\f1\fs28 \cf2 \cb4 \expnd0\expndtw0\kerning0
+ (EntryController *)sharedInstance \{\
    static EntryController *sharedInstance = nil;\
    static dispatch_once_t onceToken;\
    dispatch_once(&onceToken, ^\{\
        sharedInstance = [EntryController new];\
\
        sharedInstance.entries = [NSArray new];\
    \});\
    return sharedInstance;\
\}\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls11\ilvl0
\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the addEntry method: it needs to create a mutable version of the controller's entries array, add the entry that's passed in, and then re-set the controller's Entries array.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the removeEntry method: it needs to do the reverse. It should create a mutable copy of the entries array, remove the entry that was passed in, and then re-set the controllers Entries array.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Update the DetailViewController to save entries\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls12\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a public property:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls12\ilvl1
\f1\fs28 \cf2 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
entry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (Entry, strong, nonatomic)\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
We will use this Entry property to set the specific entry that the view controller is editing.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls13\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a Navigation Item to the Storyboard scene for the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
, remove the 'Title' text from the navigation bar if it appears\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a Bar Button Item to the navigation bar with the Save identifier\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Wire up an IBAction method to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 called 'saveButtonTapped'\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the saveButtonTapped method: it needs to call the createEntry method on the EntryController and pass the correct parameters (you'll need to import the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class), and optionally dismiss the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 once completed\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Set self.entry to the result of the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
createEntry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method (remember, the createEntry method returns the created Entry object)\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Update the ListViewController datasource to display saved entries\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls14\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Import the EntryController class to the ListTableViewDataSource\
\ls14\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Update 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
numberOfRowsInSection
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to use the count of objects in the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
[EntryController sharedInstance]
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 entries array\
\ls14\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Update 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
cellForRowAtIndexPath
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to set the label to the title of the Entry, use the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
[EntryController sharedInstance]
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 entries array and the indexPath.row to update the label with the correct Entry\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Update the ListViewController to reload the TableView each time it appears\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls15\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add an IBOutlet from your TableView to your ListViewController's private implementation\
\ls15\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
viewWillAppear
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 ViewController lifecycle method to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
ListViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls15\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Reload the TableView in the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
viewWillAppear
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Update the ListViewController to update the DetailViewController Correctly\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
We will implement a common design pattern to pass data to a detail view controller and update the detail view accordingly. Practice this and understand why we do each line.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls16\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
prepareForSegue:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method to the ListViewController\
\ls16\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Check the identifier of the segue parameter, if the identifier is 'addEntry' then we will not pass an entry, if the identifier is 'viewEntry' we will pass the selected entry to the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (you will need to import the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
DetailViewController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 and the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
, and get the IndexPath of the selected cell)\
\ls16\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add an 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
updateWithEntry:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method to the DetailViewController: it needs to update the view's TextField and TextView with the text from the entry passed into it\
\ls16\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
viewDidLoad
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method, run the updateWithEntry method with self.entry\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Run the app. You should now have a TableView that displays the correct number of entries based created during the app launch. Saving an entry on the DetailTextView should now add that entry to the list. Try pushing the Save button multiple times. This will create a new entry each time. Let's fix it.\
When we add a new entry, we want to create a new one. When we edit an entry, we want to update that specific entry in memory.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls17\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveButtonTapped:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method, add a check to see if self.entry exists. If so, update the entry's properties in place. If not, create a new entry.\
\pard\pardeftab720

\b\fs56 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Lesson 8 - NSDictionaries and NSUserDefaults\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
In this section we will add data persistence to our app by adding functionality to our EntryController class. We will convert our Entry model objects into dictionaries, save them to NSUserDefaults, and add the ability to retrieve those dictionaries from NSUserDefaults and convert them back into Entry model objects for our app to use.\
\pard\pardeftab720

\b\fs48 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Saving Data to NSUserDefaults\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
Remember that NSUserDefaults cannot store custom model objects. We will need to convert our Entry model objects to NSDictionaries to save them to NSUserDefaults. When we launch our app again, we will need pull the NSDictionaries out of NSUserDefaults and convert them into our Entry model objects for use in the app.\
This can seem unintuitive and frustrating for a beginner programmer. But this conversion process is a skill you will need to have any time you work with NSUserDefaults, writing to disk, or working with web services.\
We will do this using what we call 'builder methods'. Builder methods convert from one object type to another object type, in this case, from an Entry to an NSDictionary or an NSDictionary to an Entry.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Add the builder methods to the Entry Class\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls18\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new custom init method to the Entry class called 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
initWithDictionary:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
initWithDictionary
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method: it needs to take an NSDictionary as a parameter and set the self.title, self.bodyText, and self.timestamp from the values in the NSDictionary\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new instance method to the Entry class called 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
dictionaryRepresentation
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
dictionaryRepresentation
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method: it needs to take the self.title, self.bodyText, and self.timestamp and set those values to keys in an NSDictionary, then return the NSDictionary you created\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Hint: Use constant strings to make sure that your keys are consistent. Your data will not load correctly if your dictionary keys are not identical in both the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
initWithDictionary:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method and the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
dictionaryRepresentation
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 methods.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Update the EntryController class to add functionality to save all Entry objects to NSUserDefaults\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls19\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new method to the EntryController named 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls19\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method: it needs to iterate through the self.entries array, create an NSDictionary representation of each Entry, add it to a temporary NSMutableArray, and save that NSMutableArray to NSUserDefaults using an 'AllEntriesKey'\
\ls19\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method to each method that updates the self.entries array so that all changes are persisted to NSUserDefaults\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
In earlier steps we update Entry objects directly in memory, which was sufficient to update our ListViewController and DetailViewController with the correct data. However, our current implementation does not persist those changes because our 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method is only called when we add or remove an entry. Let's fix this by creating a public 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
save
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method that gets called when we update Entry objects.\
We add this extra method to provide a better public name than 'saveToPersistentStorage' to other classes, alternatively you could make the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method public and accomplish the same task.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls20\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new public method to the EntryController named 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
save
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
save
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method: it needs to call the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
,\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
save
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method to the DetailViewController 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveButtonTapped:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 IBAction method\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Update the EntryController class to add functionality to load all Entry objects from NSUserDefaults\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls21\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new method to the EntryController named 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
loadFromPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
loadFromPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
: it needs to load the array of NSDictionaries from NSUserDefaults using the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
AllEntriesKey
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
, iterate through the array, initialize an Entry for each NSDictionary and add it to a NSMutableArray, and set self.entries to that NSMutableArray\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
In the sharedInstance method, replace the code that sets the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
sharedInstance.entries
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to an empty array with the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
loadFromPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Run the app. You should now be able to create new entries, edit existing entries, and load saved entries when you relaunch the app.\
\pard\pardeftab720

\b\fs56 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Lesson - Core Data\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
In this section we will replace NSUserDefaults for data persistence with Core Data. Because of the way we have written the app, most of the changes we make will be in the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class. We will add the Core Data framework to the project, add a Core Data Model file, replace our Entry NSObject subclass with a NSManagedObject subclass, and update our 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 to save to and load from Core Data's persistent store.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Core Data Setup\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls22\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add the Core Data framework as a linked library in your project. Click on your DayX target, click the + button for Linked Frameworks and Libraries, and add CoreData.framework\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Add a new Model file. File, New, File, Core Data, Data Model. You can name it what you'd like, but remember what you name it because we'll need that information later. The solution uses 'Model'.\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create your 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Entry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 entity in the Model with attributes:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls22\ilvl1
\f1\fs28 \cf2 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
title
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSString)\
\ls22\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
bodyText
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSString)\
\ls22\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
timestamp
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (NSDate)\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls22\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Delete your current Entry.h and Entry.m files, we will replace them with the NSManagedObject subclass\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Create your NSManagedObject subclass by clicking Editor, Create NSManagedObject Subclass and navigating through the menus to create the new Entry.h and Entry.m files\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Import the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Stack
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class from the solution or from {\field{\*\fldinst{HYPERLINK "https://gist.github.com/jkhowland/6ba5accdb4b8d5d98af0"}}{\fldrslt \cf3 \expnd0\expndtw0\kerning0
gist}}\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Update the EntryController\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls23\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Remove the implementation code from the following methods:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls23\ilvl1
\f1\fs28 \cf2 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
saveToPersistentStore:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls23\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
removeEntry:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls23\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Remove the following properties and methods, and remove references to them:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440
\ls23\ilvl1
\f1\fs28 \cf2 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
loadFromPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
\
\ls23\ilvl1
\f1\fs28 \cb0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
entries
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 (private only, leave the public)\
\pard\pardeftab720

\b \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Adding Entry Objects to Core Data\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls24\ilvl0
\b0 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Reimplement 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
createEntryWithTitle: bodyText:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method: it needs to use the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
insertNewObjectForEntityForName:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 on 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
NSEntityDescription
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 instead of [Entry new]\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
We no longer need to use the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
addEntry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method. Instead we want to save directly to the persistent store. Use the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 method to save our new entry.\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Reimplement 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
saveToPersistentStorage
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
: it needs to save the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
managedObjectContext
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 on the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Stack
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class.\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Reimplement 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
removeEntry:
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
: it needs to delete the entry object from the entry's Managed Object Context.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Pulling Entry Objects from Core Data\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls25\ilvl0
\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Implement 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
entries
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 as a custom getter method for the public, read-only entries property: it needs to instantiate and execute a fetch request for 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Entry
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 entities from the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
managedObjectContext
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 on the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
Stack
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class.\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
Run the app. Your entries saved to NSUserDefaults should no longer appear. When you create an Entry, it should save to Core Data and display in your list of entries. When you reload your app, your entries should display in the list.\
\pard\pardeftab720

\b\fs40 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
The Beauty of MVC\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
Take note that we were able to update our entire model by updating the 
\f1\fs28 \cb0 \expnd0\expndtw0\kerning0
EntryController
\f0\fs32 \cb1 \expnd0\expndtw0\kerning0
 class. We were able to do this because of well-defined, specific roles that we assigned to each class.}